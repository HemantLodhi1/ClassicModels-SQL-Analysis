USE classicmodels;

-- 1. Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.
SELECT customerName, count(o.orderNumber) as OrderCount 
FROM customers c
INNER JOIN orders o ON c.customerNumber=o.customerNumber
GROUP BY 1 
ORDER BY 2 DESC
LIMIT 10;

-- 2. Retrieve the list of customers who have placed orders but haven't made any payments yet. 
SELECT c.customerName
FROM customers c
WHERE c.customerNumber IN (
         SELECT o.customerNumber FROM orders o
		 WHERE o.customerNumber NOT IN (
         SELECT p.customerNumber FROM payments p 
         )
);

/* 3. 
Retrieve a product that has been ordered the least number of times. Display the product code, 
product name, and the number of times it has been ordered.*/ 
SELECT p.productCode, p.productName, count(o.orderNumber) 
FROM products p 
INNER JOIN orderdetails od ON p.productCode = od.productCode
INNER JOIN orders o ON od.orderNumber=o.orderNumber
group by p.productCode 
order by 3 desc
LIMIT 1;

/*4. Classic Models has a product line called "Vintage Cars." 
The management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December).
 Write a MySQL stored procedure that takes no input parameters and returns total revenue of the "Vintage Cars" product line for
 the last quarter of 2003.
*/

DELIMITER $$ 
DROP PROCEDURE IF EXISTS TotalRevanueVintageCars$$
DELIMITER ;


DELIMITER $$ 
CREATE PROCEDURE TotalRevanueVintageCars()
BEGIN 
DECLARE total_revanue DECIMAL(10,2);

SELECT sum(od.quantityOrdered * od.priceEach) INTO total_revanue 
FROM orderdetails od 
INNER JOIN orders o ON od.orderNumber = o.orderNumber
WHERE o.orderDate >= '2003-10-01' AND o.orderDate <= '2003-12-31'
AND productCode IN (SELECT productcode FROM products 
					WHERE productline='Vintage Cars');
SELECT total_revanue as TotalRevanue ;
END $$
DELIMITER ;
call TotalRevanueVintageCars(); 

/* 5. Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers 
along with their total order values across all orders. */ 
WITH CustomerOrderTotal AS
(
SELECT c.customerName, SUM(od.quantityOrdered * od.priceEach) as TotalOrderValue
FROM customers c 
INNER JOIN orders o ON c.customerNumber= o.customerNumber
INNER JOIN orderdetails od ON o.orderNumber=od.orderNumber 
GROUP BY c.customerName
)

SELECT customerName, totalordervalue from CustomerOrderTotal
ORDER BY totalordervalue DESC
LIMIT 5;

